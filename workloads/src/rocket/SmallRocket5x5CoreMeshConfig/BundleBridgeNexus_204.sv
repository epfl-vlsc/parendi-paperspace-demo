// Generated by CIRCT firtool-1.30.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module BundleBridgeNexus_204(
  output [4:0] auto_out_21,
               auto_out_20,
               auto_out_19,
               auto_out_18,
               auto_out_17,
               auto_out_16,
               auto_out_15,
               auto_out_14,
               auto_out_13,
               auto_out_12,
               auto_out_11,
               auto_out_10,
               auto_out_9,
               auto_out_8,
               auto_out_7,
               auto_out_6,
               auto_out_5,
               auto_out_4,
               auto_out_3,
               auto_out_2,
               auto_out_1,
               auto_out_0
);

  wire [4:0] outputs_0 = 5'h0;	// HasTiles.scala:159:32
  wire [4:0] outputs_1 = 5'h1;	// HasTiles.scala:159:32
  wire [4:0] outputs_2 = 5'h2;	// HasTiles.scala:159:32
  wire [4:0] outputs_3 = 5'h3;	// HasTiles.scala:159:32
  wire [4:0] outputs_4 = 5'h4;	// HasTiles.scala:159:32
  wire [4:0] outputs_5 = 5'h5;	// HasTiles.scala:159:32
  wire [4:0] outputs_6 = 5'h6;	// HasTiles.scala:159:32
  wire [4:0] outputs_7 = 5'h7;	// HasTiles.scala:159:32
  wire [4:0] outputs_8 = 5'h8;	// HasTiles.scala:159:32
  wire [4:0] outputs_9 = 5'h9;	// HasTiles.scala:159:32
  wire [4:0] outputs_10 = 5'hA;	// HasTiles.scala:159:32
  wire [4:0] outputs_11 = 5'hB;	// HasTiles.scala:159:32
  wire [4:0] outputs_12 = 5'hC;	// HasTiles.scala:159:32
  wire [4:0] outputs_13 = 5'hD;	// HasTiles.scala:159:32
  wire [4:0] outputs_14 = 5'hE;	// HasTiles.scala:159:32
  wire [4:0] outputs_15 = 5'hF;	// HasTiles.scala:159:32
  wire [4:0] outputs_16 = 5'h10;	// HasTiles.scala:159:32
  wire [4:0] outputs_17 = 5'h11;	// HasTiles.scala:159:32
  wire [4:0] outputs_18 = 5'h12;	// HasTiles.scala:159:32
  wire [4:0] outputs_19 = 5'h13;	// HasTiles.scala:159:32
  wire [4:0] outputs_20 = 5'h14;	// HasTiles.scala:159:32
  wire [4:0] outputs_21 = 5'h15;	// HasTiles.scala:159:32
  assign auto_out_21 = outputs_21;	// HasTiles.scala:159:32
  assign auto_out_20 = outputs_20;	// HasTiles.scala:159:32
  assign auto_out_19 = outputs_19;	// HasTiles.scala:159:32
  assign auto_out_18 = outputs_18;	// HasTiles.scala:159:32
  assign auto_out_17 = outputs_17;	// HasTiles.scala:159:32
  assign auto_out_16 = outputs_16;	// HasTiles.scala:159:32
  assign auto_out_15 = outputs_15;	// HasTiles.scala:159:32
  assign auto_out_14 = outputs_14;	// HasTiles.scala:159:32
  assign auto_out_13 = outputs_13;	// HasTiles.scala:159:32
  assign auto_out_12 = outputs_12;	// HasTiles.scala:159:32
  assign auto_out_11 = outputs_11;	// HasTiles.scala:159:32
  assign auto_out_10 = outputs_10;	// HasTiles.scala:159:32
  assign auto_out_9 = outputs_9;	// HasTiles.scala:159:32
  assign auto_out_8 = outputs_8;	// HasTiles.scala:159:32
  assign auto_out_7 = outputs_7;	// HasTiles.scala:159:32
  assign auto_out_6 = outputs_6;	// HasTiles.scala:159:32
  assign auto_out_5 = outputs_5;	// HasTiles.scala:159:32
  assign auto_out_4 = outputs_4;	// HasTiles.scala:159:32
  assign auto_out_3 = outputs_3;	// HasTiles.scala:159:32
  assign auto_out_2 = outputs_2;	// HasTiles.scala:159:32
  assign auto_out_1 = outputs_1;	// HasTiles.scala:159:32
  assign auto_out_0 = outputs_0;	// HasTiles.scala:159:32
endmodule

