// Generated by CIRCT firtool-1.30.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module MulDiv(
  input         clock,
                reset,
                io_req_valid,
  input  [3:0]  io_req_bits_fn,
  input         io_req_bits_dw,
  input  [63:0] io_req_bits_in1,
                io_req_bits_in2,
  input  [4:0]  io_req_bits_tag,
  input         io_kill,
                io_resp_ready,
  output        io_req_ready,
                io_resp_valid,
  output [63:0] io_resp_bits_data,
  output [4:0]  io_resp_bits_tag
);

  reg  [2:0]   state;	// Multiplier.scala:48:22
  reg          req_dw;	// Multiplier.scala:50:16
  reg  [4:0]   req_tag;	// Multiplier.scala:50:16
  reg  [6:0]   count;	// Multiplier.scala:51:18
  reg          neg_out;	// Multiplier.scala:54:20
  reg          isHi;	// Multiplier.scala:55:17
  reg          resHi;	// Multiplier.scala:56:18
  reg  [64:0]  divisor;	// Multiplier.scala:57:20
  reg  [129:0] remainder;	// Multiplier.scala:58:22
  wire [63:0]  result = resHi ? remainder[128:65] : remainder[63:0];	// Multiplier.scala:56:18, :58:22, :86:{19,36,57}
  wire [31:0]  loOut = req_dw | state[0] ? result[31:0] : result[63:32];	// Multiplier.scala:48:22, :50:16, :86:19, :172:23, :173:{18,65,82}
  wire         _io_resp_valid_output = state == 3'h6 | (&state);	// Multiplier.scala:48:22, :122:13, :178:{27,42,51}
  wire         _io_req_ready_output = state == 3'h0;	// Multiplier.scala:48:22, :179:25
  wire [65:0]  _GEN =
    {{65{remainder[64]}}, remainder[0]} * {divisor[64], divisor}
    + {remainder[129], remainder[129:65]};	// Multiplier.scala:57:20, :58:22, :104:31, :105:31, :106:24, :109:{38,67,76}
  wire [64:0]  subtractor = remainder[128:64] - divisor;	// Multiplier.scala:57:20, :58:22, :85:{29,37}
  wire [2:0]   decoded_invInputs = ~(io_req_bits_fn[2:0]);	// decoder.scala:40:16, pla.scala:78:21
  wire [1:0]   _decoded_T_2 = {decoded_invInputs[1], decoded_invInputs[2]};	// Cat.scala:33:92, pla.scala:78:21, :91:29
  wire         lhs_sign =
    (|{decoded_invInputs[0], &_decoded_T_2})
    & (io_req_bits_dw ? io_req_bits_in1[63] : io_req_bits_in1[31]);	// Cat.scala:33:92, Multiplier.scala:78:{23,29,38,48}, pla.scala:78:21, :91:29, :98:74, :114:39
  wire         rhs_sign =
    (|{&_decoded_T_2, &{decoded_invInputs[0], io_req_bits_fn[2]}})
    & (io_req_bits_dw ? io_req_bits_in2[63] : io_req_bits_in2[31]);	// Cat.scala:33:92, Multiplier.scala:78:{23,29,38,48}, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39
  wire         _T_10 = state == 3'h1;	// Multiplier.scala:48:22, :89:39
  wire         _T_13 = state == 3'h5;	// Multiplier.scala:48:22, :98:39
  wire         _T_14 = state == 3'h2;	// Multiplier.scala:48:22, :103:39
  wire         _GEN_0 = _T_14 & count == 7'h3F;	// Multiplier.scala:51:18, :98:57, :103:{39,50}, :121:{25,55}, :122:13
  wire         _T_17 = state == 3'h3;	// Multiplier.scala:48:22, :96:11, :126:39
  wire         _T_18 = count == 7'h40;	// Multiplier.scala:51:18, :116:38, :135:17
  wire         _T_23 = _io_req_ready_output & io_req_valid;	// Decoupled.scala:51:35, Multiplier.scala:179:25
  wire [1:0]   _decoded_orMatrixOutputs_T_4 =
    {&{io_req_bits_fn[0], decoded_invInputs[2]}, io_req_bits_fn[1]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29, :98:74
  always @(posedge clock) begin
    if (reset)
      state <= 3'h0;	// Multiplier.scala:48:22
    else if (_T_23) begin	// Decoupled.scala:51:35
      if (decoded_invInputs[2])	// pla.scala:78:21, :91:29
        state <= 3'h2;	// Multiplier.scala:48:22, :103:39
      else	// pla.scala:91:29
        state <= {1'h0, ~(lhs_sign | rhs_sign), 1'h1};	// Multiplier.scala:48:22, :50:16, :75:50, :78:23, :162:{36,46}
    end
    else if (io_resp_ready & _io_resp_valid_output | io_kill)	// Decoupled.scala:51:35, Multiplier.scala:158:24, :178:42
      state <= 3'h0;	// Multiplier.scala:48:22
    else if (_T_17 & _T_18)	// Multiplier.scala:103:50, :126:{39,50}, :135:{17,42}, :136:13
      state <= {1'h1, ~neg_out, 1'h1};	// Multiplier.scala:48:22, :54:20, :75:50, :136:19
    else if (_GEN_0)	// Multiplier.scala:98:57, :103:50, :121:55, :122:13
      state <= 3'h6;	// Multiplier.scala:48:22, :122:13
    else if (_T_13)	// Multiplier.scala:98:39
      state <= 3'h7;	// Multiplier.scala:48:22, :100:11
    else if (_T_10)	// Multiplier.scala:89:39
      state <= 3'h3;	// Multiplier.scala:48:22, :96:11
    if (_T_23) begin	// Decoupled.scala:51:35
      req_dw <= io_req_bits_dw;	// Multiplier.scala:50:16
      req_tag <= io_req_bits_tag;	// Multiplier.scala:50:16
      count <= {1'h0, decoded_invInputs[2] & ~io_req_bits_dw, 5'h0};	// Multiplier.scala:50:16, :51:18, :75:60, :165:{11,38,46}, pla.scala:78:21, :91:29
      if (|_decoded_orMatrixOutputs_T_4)	// Cat.scala:33:92, pla.scala:114:39
        neg_out <= lhs_sign;	// Multiplier.scala:54:20, :78:23
      else	// pla.scala:114:39
        neg_out <= lhs_sign != rhs_sign;	// Multiplier.scala:54:20, :78:23, :166:46
      isHi <= |_decoded_orMatrixOutputs_T_4;	// Cat.scala:33:92, Multiplier.scala:55:17, pla.scala:114:39
      divisor <=
        {rhs_sign,
         io_req_bits_dw ? io_req_bits_in2[63:32] : {32{rhs_sign}},
         io_req_bits_in2[31:0]};	// Bitwise.scala:77:12, Cat.scala:33:92, Multiplier.scala:57:20, :78:23, :79:{17,43}, :80:15
      remainder <=
        {66'h0,
         io_req_bits_dw ? io_req_bits_in1[63:32] : {32{lhs_sign}},
         io_req_bits_in1[31:0]};	// Bitwise.scala:77:12, Multiplier.scala:58:22, :78:23, :79:{17,43}, :80:15, :91:17, :168:15
    end
    else begin	// Decoupled.scala:51:35
      if (_T_17) begin	// Multiplier.scala:126:39
        count <= count + 7'h1;	// Multiplier.scala:51:18, :120:20, :141:20
        remainder <=
          {1'h0,
           subtractor[64] ? remainder[127:64] : subtractor[63:0],
           remainder[63:0],
           ~(subtractor[64])};	// Multiplier.scala:50:16, :58:22, :85:37, :86:57, :130:28, :131:{14,24,45,67}, :134:15
      end
      else if (_T_14) begin	// Multiplier.scala:103:39
        count <= count + 7'h1;	// Multiplier.scala:51:18, :120:20
        remainder <= {_GEN[65:1], count == 7'h3E & neg_out, _GEN[0], remainder[63:1]};	// Cat.scala:33:92, Multiplier.scala:51:18, :54:20, :58:22, :106:24, :109:76, :110:38, :111:{32,61}, :118:{34,67}
      end
      else if (_T_13 | _T_10 & remainder[63])	// Multiplier.scala:58:22, :89:{39,57}, :90:{20,27}, :91:17, :98:{39,57}, :99:15
        remainder <= {66'h0, 64'h0 - result};	// Multiplier.scala:50:16, :58:22, :86:19, :87:27, :91:17
      neg_out <= ~(_T_17 & count == 7'h0 & ~(subtractor[64]) & ~isHi) & neg_out;	// Multiplier.scala:51:18, :54:20, :55:17, :85:37, :120:20, :126:{39,50}, :130:28, :143:{24,35}, :156:{21,28,38}
      if (_T_10 & divisor[63])	// Multiplier.scala:57:20, :89:{39,57}, :93:{18,25}, :94:15
        divisor <= subtractor;	// Multiplier.scala:57:20, :85:37
    end
    resHi <= ~_T_23 & (_T_17 & _T_18 | _GEN_0 ? isHi : ~_T_13 & resHi);	// Decoupled.scala:51:35, Multiplier.scala:55:17, :56:18, :98:{39,57}, :101:11, :103:50, :121:55, :122:13, :123:13, :126:{39,50}, :135:{17,42}, :137:13, :161:24, :164:11
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        state = _RANDOM_0[2:0];	// Multiplier.scala:48:22
        req_dw = _RANDOM_0[7];	// Multiplier.scala:48:22, :50:16
        req_tag = _RANDOM_4[12:8];	// Multiplier.scala:50:16
        count = _RANDOM_4[19:13];	// Multiplier.scala:50:16, :51:18
        neg_out = _RANDOM_4[20];	// Multiplier.scala:50:16, :54:20
        isHi = _RANDOM_4[21];	// Multiplier.scala:50:16, :55:17
        resHi = _RANDOM_4[22];	// Multiplier.scala:50:16, :56:18
        divisor = {_RANDOM_4[31:23], _RANDOM_5, _RANDOM_6[23:0]};	// Multiplier.scala:50:16, :57:20
        remainder = {_RANDOM_6[31:24], _RANDOM_7, _RANDOM_8, _RANDOM_9, _RANDOM_10[25:0]};	// Multiplier.scala:57:20, :58:22
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_req_ready = _io_req_ready_output;	// Multiplier.scala:179:25
  assign io_resp_valid = _io_resp_valid_output;	// Multiplier.scala:178:42
  assign io_resp_bits_data = {req_dw ? result[63:32] : {32{loOut[31]}}, loOut};	// Bitwise.scala:77:12, Cat.scala:33:92, Multiplier.scala:50:16, :86:19, :173:{18,65}, :174:{18,50}
  assign io_resp_bits_tag = req_tag;	// Multiplier.scala:50:16
endmodule

