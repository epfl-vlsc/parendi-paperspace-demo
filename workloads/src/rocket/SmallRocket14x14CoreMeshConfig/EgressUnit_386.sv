// Generated by CIRCT firtool-1.30.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module EgressUnit_386(
  input         clock,
                reset,
                io_in_0_valid,
                io_in_0_bits_head,
                io_in_0_bits_tail,
  input  [72:0] io_in_0_bits_payload,
  input  [8:0]  io_in_0_bits_flow_ingress_node,
  input  [1:0]  io_in_0_bits_flow_ingress_node_id,
  input         io_allocs_0_alloc,
                io_credit_alloc_0_alloc,
                io_credit_alloc_0_tail,
                io_out_ready,
  output        io_credit_available_0,
                io_channel_status_0_occupied,
                io_out_valid,
                io_out_bits_head,
                io_out_bits_tail,
  output [72:0] io_out_bits_payload
);

  wire       _q_io_enq_ready;	// @[EgressUnit.scala:22:17]
  wire [1:0] _q_io_count;	// @[EgressUnit.scala:22:17]
  reg        channel_empty;	// @[EgressUnit.scala:20:30]
  wire       _q_io_enq_bits_ingress_id_T_577 = io_in_0_bits_flow_ingress_node_id == 2'h0;	// @[EgressUnit.scala:32:27]
  wire [9:0] _GEN =
    (io_in_0_bits_flow_ingress_node == 9'h1 & _q_io_enq_bits_ingress_id_T_577 ? 10'h3 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h43 & _q_io_enq_bits_ingress_id_T_577 ? 10'hC9 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h51 & _q_io_enq_bits_ingress_id_T_577 ? 10'hF3 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h75 & _q_io_enq_bits_ingress_id_T_577 ? 10'h15F : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h80 & _q_io_enq_bits_ingress_id_T_577 ? 10'h180 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h13 & _q_io_enq_bits_ingress_id_T_577 ? 10'h39 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hBC & _q_io_enq_bits_ingress_id_T_577 ? 10'h234 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h86 & _q_io_enq_bits_ingress_id_T_577 ? 10'h192 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h1A & _q_io_enq_bits_ingress_id_T_577 ? 10'h4E : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hB1 & _q_io_enq_bits_ingress_id_T_577 ? 10'h213 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h15 & _q_io_enq_bits_ingress_id_T_577 ? 10'h3F : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h7D & _q_io_enq_bits_ingress_id_T_577 ? 10'h177 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hA6 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1F2 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h3D & _q_io_enq_bits_ingress_id_T_577 ? 10'hB7 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h63 & _q_io_enq_bits_ingress_id_T_577 ? 10'h129 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h3 & _q_io_enq_bits_ingress_id_T_577 ? 10'h9 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h37 & _q_io_enq_bits_ingress_id_T_577 ? 10'hA5 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h50 & _q_io_enq_bits_ingress_id_T_577 ? 10'hF0 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h6D & _q_io_enq_bits_ingress_id_T_577 ? 10'h147 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h61 & _q_io_enq_bits_ingress_id_T_577 ? 10'h123 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h8D & _q_io_enq_bits_ingress_id_T_577 ? 10'h1A7 : 10'h0)
    | (io_in_0_bits_flow_ingress_node == 9'h47 & _q_io_enq_bits_ingress_id_T_577 ? 10'hD5 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h4B & _q_io_enq_bits_ingress_id_T_577 ? 10'hE1 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hBA & _q_io_enq_bits_ingress_id_T_577 ? 10'h22E : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h89 & _q_io_enq_bits_ingress_id_T_577 ? 10'h19B : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h6C & _q_io_enq_bits_ingress_id_T_577 ? 10'h144 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h5C & _q_io_enq_bits_ingress_id_T_577 ? 10'h114 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h76 & _q_io_enq_bits_ingress_id_T_577 ? 10'h162 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h32 & _q_io_enq_bits_ingress_id_T_577 ? 10'h96 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h91 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1B3 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h65 & _q_io_enq_bits_ingress_id_T_577 ? 10'h12F : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h5F & _q_io_enq_bits_ingress_id_T_577 ? 10'h11D : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h2B & _q_io_enq_bits_ingress_id_T_577 ? 10'h81 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h27 & _q_io_enq_bits_ingress_id_T_577 ? 10'h75 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h9A & _q_io_enq_bits_ingress_id_T_577 ? 10'h1CE : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h97 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1C5 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h4A & _q_io_enq_bits_ingress_id_T_577 ? 10'hDE : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hB0 & _q_io_enq_bits_ingress_id_T_577 ? 10'h210 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h40 & _q_io_enq_bits_ingress_id_T_577 ? 10'hC0 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h12 & _q_io_enq_bits_ingress_id_T_577 ? 10'h36 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h11 & _q_io_enq_bits_ingress_id_T_577 ? 10'h33 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h19 & _q_io_enq_bits_ingress_id_T_577 ? 10'h4B : 10'h0)
    | (io_in_0_bits_flow_ingress_node == 9'h78 & _q_io_enq_bits_ingress_id_T_577 ? 10'h168 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hC & _q_io_enq_bits_ingress_id_T_577 ? 10'h24 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h94 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1BC : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hA5 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1EF : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h95 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1BF : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h30 & _q_io_enq_bits_ingress_id_T_577 ? 10'h90 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h21 & _q_io_enq_bits_ingress_id_T_577 ? 10'h63 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h34 & _q_io_enq_bits_ingress_id_T_577 ? 10'h9C : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hA7 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1F5 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hAC & _q_io_enq_bits_ingress_id_T_577 ? 10'h204 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h8B & _q_io_enq_bits_ingress_id_T_577 ? 10'h1A1 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hA & _q_io_enq_bits_ingress_id_T_577 ? 10'h1E : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h8F & _q_io_enq_bits_ingress_id_T_577 ? 10'h1AD : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h6 & _q_io_enq_bits_ingress_id_T_577 ? 10'h12 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h23 & _q_io_enq_bits_ingress_id_T_577 ? 10'h69 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h2F & _q_io_enq_bits_ingress_id_T_577 ? 10'h8D : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h5 & _q_io_enq_bits_ingress_id_T_577 ? 10'hF : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h93 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1B9 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hAB & _q_io_enq_bits_ingress_id_T_577 ? 10'h201 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h29 & _q_io_enq_bits_ingress_id_T_577 ? 10'h7B : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h8E & _q_io_enq_bits_ingress_id_T_577 ? 10'h1AA : 10'h0)
    | (io_in_0_bits_flow_ingress_node == 9'h55 & _q_io_enq_bits_ingress_id_T_577 ? 10'hFF : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h83 & _q_io_enq_bits_ingress_id_T_577 ? 10'h189 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h98 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1C8 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h7C & _q_io_enq_bits_ingress_id_T_577 ? 10'h174 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hBE & _q_io_enq_bits_ingress_id_T_577 ? 10'h23A : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hB2 & _q_io_enq_bits_ingress_id_T_577 ? 10'h216 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hB4 & _q_io_enq_bits_ingress_id_T_577 ? 10'h21C : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h3C & _q_io_enq_bits_ingress_id_T_577 ? 10'hB4 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h57 & _q_io_enq_bits_ingress_id_T_577 ? 10'h105 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hAE & _q_io_enq_bits_ingress_id_T_577 ? 10'h20A : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h26 & _q_io_enq_bits_ingress_id_T_577 ? 10'h72 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h73 & _q_io_enq_bits_ingress_id_T_577 ? 10'h159 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h1D & _q_io_enq_bits_ingress_id_T_577 ? 10'h57 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h9C & _q_io_enq_bits_ingress_id_T_577 ? 10'h1D4 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h6F & _q_io_enq_bits_ingress_id_T_577 ? 10'h14D : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h8C & _q_io_enq_bits_ingress_id_T_577 ? 10'h1A4 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h66 & _q_io_enq_bits_ingress_id_T_577 ? 10'h132 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h60 & _q_io_enq_bits_ingress_id_T_577 ? 10'h120 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h49 & _q_io_enq_bits_ingress_id_T_577 ? 10'hDB : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h1C & _q_io_enq_bits_ingress_id_T_577 ? 10'h54 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hBB & _q_io_enq_bits_ingress_id_T_577 ? 10'h231 : 10'h0)
    | (io_in_0_bits_flow_ingress_node == 9'hB9 & _q_io_enq_bits_ingress_id_T_577 ? 10'h22B : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hA2 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1E6 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h7A & _q_io_enq_bits_ingress_id_T_577 ? 10'h16E : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h16 & _q_io_enq_bits_ingress_id_T_577 ? 10'h42 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h5A & _q_io_enq_bits_ingress_id_T_577 ? 10'h10E : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h5E & _q_io_enq_bits_ingress_id_T_577 ? 10'h11A : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h6B & _q_io_enq_bits_ingress_id_T_577 ? 10'h141 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h4D & _q_io_enq_bits_ingress_id_T_577 ? 10'hE7 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hD & _q_io_enq_bits_ingress_id_T_577 ? 10'h27 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h6A & _q_io_enq_bits_ingress_id_T_577 ? 10'h13E : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h38 & _q_io_enq_bits_ingress_id_T_577 ? 10'hA8 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h84 & _q_io_enq_bits_ingress_id_T_577 ? 10'h18C : 10'h0);	// @[EgressUnit.scala:31:{39,75}, :32:27, Mux.scala:27:73]
  wire [9:0] _GEN_0 =
    (io_in_0_bits_flow_ingress_node == 9'h18 & _q_io_enq_bits_ingress_id_T_577 ? 10'h48 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h88 & _q_io_enq_bits_ingress_id_T_577 ? 10'h198 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hBD & _q_io_enq_bits_ingress_id_T_577 ? 10'h237 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h1F & _q_io_enq_bits_ingress_id_T_577 ? 10'h5D : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h99 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1CB : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h2E & _q_io_enq_bits_ingress_id_T_577 ? 10'h8A : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h10 & _q_io_enq_bits_ingress_id_T_577 ? 10'h30 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h5B & _q_io_enq_bits_ingress_id_T_577 ? 10'h111 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h70 & _q_io_enq_bits_ingress_id_T_577 ? 10'h150 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h9B & _q_io_enq_bits_ingress_id_T_577 ? 10'h1D1 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h9D & _q_io_enq_bits_ingress_id_T_577 ? 10'h1D7 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h1B & _q_io_enq_bits_ingress_id_T_577 ? 10'h51 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h28 & _q_io_enq_bits_ingress_id_T_577 ? 10'h78 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h54 & _q_io_enq_bits_ingress_id_T_577 ? 10'hFC : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h5D & _q_io_enq_bits_ingress_id_T_577 ? 10'h117 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h4F & _q_io_enq_bits_ingress_id_T_577 ? 10'hED : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h24 & _q_io_enq_bits_ingress_id_T_577 ? 10'h6C : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hAA & _q_io_enq_bits_ingress_id_T_577 ? 10'h1FE : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h79 & _q_io_enq_bits_ingress_id_T_577 ? 10'h16B : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h8A & _q_io_enq_bits_ingress_id_T_577 ? 10'h19E : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hAD & _q_io_enq_bits_ingress_id_T_577 ? 10'h207 : 10'h0)
    | (io_in_0_bits_flow_ingress_node == 9'h72 & _q_io_enq_bits_ingress_id_T_577 ? 10'h156 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h4 & _q_io_enq_bits_ingress_id_T_577 ? 10'hC : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hB7 & _q_io_enq_bits_ingress_id_T_577 ? 10'h225 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h81 & _q_io_enq_bits_ingress_id_T_577 ? 10'h183 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h31 & _q_io_enq_bits_ingress_id_T_577 ? 10'h93 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hBF & _q_io_enq_bits_ingress_id_T_577 ? 10'h23D : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h9E & _q_io_enq_bits_ingress_id_T_577 ? 10'h1DA : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h41 & _q_io_enq_bits_ingress_id_T_577 ? 10'hC3 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hB6 & _q_io_enq_bits_ingress_id_T_577 ? 10'h222 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h90 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1B0 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hB5 & _q_io_enq_bits_ingress_id_T_577 ? 10'h21F : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h77 & _q_io_enq_bits_ingress_id_T_577 ? 10'h165 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h20 & _q_io_enq_bits_ingress_id_T_577 ? 10'h60 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h42 & _q_io_enq_bits_ingress_id_T_577 ? 10'hC6 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h3B & _q_io_enq_bits_ingress_id_T_577 ? 10'hB1 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h7 & _q_io_enq_bits_ingress_id_T_577 ? 10'h15 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hA1 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1E3 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hA8 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1F8 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h85 & _q_io_enq_bits_ingress_id_T_577 ? 10'h18F : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h3F & _q_io_enq_bits_ingress_id_T_577 ? 10'hBD : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h7E & _q_io_enq_bits_ingress_id_T_577 ? 10'h17A : 10'h0)
    | (io_in_0_bits_flow_ingress_node == 9'hB & _q_io_enq_bits_ingress_id_T_577 ? 10'h21 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h4C & _q_io_enq_bits_ingress_id_T_577 ? 10'hE4 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h6E & _q_io_enq_bits_ingress_id_T_577 ? 10'h14A : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h48 & _q_io_enq_bits_ingress_id_T_577 ? 10'hD8 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h2D & _q_io_enq_bits_ingress_id_T_577 ? 10'h87 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h52 & _q_io_enq_bits_ingress_id_T_577 ? 10'hF6 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h64 & _q_io_enq_bits_ingress_id_T_577 ? 10'h12C : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h62 & _q_io_enq_bits_ingress_id_T_577 ? 10'h126 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hA4 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1EC : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hA3 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1E9 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h7B & _q_io_enq_bits_ingress_id_T_577 ? 10'h171 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h87 & _q_io_enq_bits_ingress_id_T_577 ? 10'h195 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h9F & _q_io_enq_bits_ingress_id_T_577 ? 10'h1DD : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h71 & _q_io_enq_bits_ingress_id_T_577 ? 10'h153 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h82 & _q_io_enq_bits_ingress_id_T_577 ? 10'h186 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h35 & _q_io_enq_bits_ingress_id_T_577 ? 10'h9F : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h2C & _q_io_enq_bits_ingress_id_T_577 ? 10'h84 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hA0 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1E0 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h59 & _q_io_enq_bits_ingress_id_T_577 ? 10'h10B : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h74 & _q_io_enq_bits_ingress_id_T_577 ? 10'h15C : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h3A & _q_io_enq_bits_ingress_id_T_577 ? 10'hAE : 10'h0)
    | (io_in_0_bits_flow_ingress_node == 9'h7F & _q_io_enq_bits_ingress_id_T_577 ? 10'h17D : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hC0 & _q_io_enq_bits_ingress_id_T_577 ? 10'h240 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h45 & _q_io_enq_bits_ingress_id_T_577 ? 10'hCF : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h33 & _q_io_enq_bits_ingress_id_T_577 ? 10'h99 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h17 & _q_io_enq_bits_ingress_id_T_577 ? 10'h45 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hE & _q_io_enq_bits_ingress_id_T_577 ? 10'h2A : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h36 & _q_io_enq_bits_ingress_id_T_577 ? 10'hA2 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h46 & _q_io_enq_bits_ingress_id_T_577 ? 10'hD2 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h8 & _q_io_enq_bits_ingress_id_T_577 ? 10'h18 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h56 & _q_io_enq_bits_ingress_id_T_577 ? 10'h102 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hAF & _q_io_enq_bits_ingress_id_T_577 ? 10'h20D : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h92 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1B6 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h14 & _q_io_enq_bits_ingress_id_T_577 ? 10'h3C : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h96 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1C2 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h2 & _q_io_enq_bits_ingress_id_T_577 ? 10'h6 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hF & _q_io_enq_bits_ingress_id_T_577 ? 10'h2D : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h2A & _q_io_enq_bits_ingress_id_T_577 ? 10'h7E : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h58 & _q_io_enq_bits_ingress_id_T_577 ? 10'h108 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hB3 & _q_io_enq_bits_ingress_id_T_577 ? 10'h219 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h9 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1B : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hB8 & _q_io_enq_bits_ingress_id_T_577 ? 10'h228 : 10'h0)
    | (io_in_0_bits_flow_ingress_node == 9'h69 & _q_io_enq_bits_ingress_id_T_577 ? 10'h13B : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h68 & _q_io_enq_bits_ingress_id_T_577 ? 10'h138 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h44 & _q_io_enq_bits_ingress_id_T_577 ? 10'hCC : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h25 & _q_io_enq_bits_ingress_id_T_577 ? 10'h6F : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h39 & _q_io_enq_bits_ingress_id_T_577 ? 10'hAB : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h22 & _q_io_enq_bits_ingress_id_T_577 ? 10'h66 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'hA9 & _q_io_enq_bits_ingress_id_T_577 ? 10'h1FB : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h53 & _q_io_enq_bits_ingress_id_T_577 ? 10'hF9 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h4E & _q_io_enq_bits_ingress_id_T_577 ? 10'hEA : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h1E & _q_io_enq_bits_ingress_id_T_577 ? 10'h5A : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h67 & _q_io_enq_bits_ingress_id_T_577 ? 10'h135 : 10'h0) | (io_in_0_bits_flow_ingress_node == 9'h3E & _q_io_enq_bits_ingress_id_T_577 ? 10'hBA : 10'h0);	// @[EgressUnit.scala:31:{39,75}, :32:27, Mux.scala:27:73]
  always @(posedge clock) begin
    if (reset)
      channel_empty <= 1'h1;	// @[EgressUnit.scala:20:30]
    else
      channel_empty <= ~io_allocs_0_alloc & (io_credit_alloc_0_alloc & io_credit_alloc_0_tail | channel_empty);	// @[EgressUnit.scala:20:30, :44:{34,62}, :45:19, :49:29, :50:19]
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// @[EgressUnit.scala:38:9]
      if (~reset & io_in_0_valid & ~_q_io_enq_ready) begin	// @[EgressUnit.scala:22:17, :38:{9,30}]
        if (`ASSERT_VERBOSE_COND_)	// @[EgressUnit.scala:38:9]
          $error("Assertion failed\n    at EgressUnit.scala:38 assert(!(q.io.enq.valid && !q.io.enq.ready))\n");	// @[EgressUnit.scala:38:9]
        if (`STOP_COND_)	// @[EgressUnit.scala:38:9]
          $fatal;	// @[EgressUnit.scala:38:9]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        channel_empty = _RANDOM_0[0];	// @[EgressUnit.scala:20:30]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Queue_17 q (	// @[EgressUnit.scala:22:17]
    .clock                  (clock),
    .reset                  (reset),
    .io_enq_valid           (io_in_0_valid),
    .io_enq_bits_head       (io_in_0_bits_head),
    .io_enq_bits_tail       (io_in_0_bits_tail),
    .io_enq_bits_payload    (io_in_0_bits_payload),
    .io_enq_bits_ingress_id (_GEN | _GEN_0),	// @[Mux.scala:27:73]
    .io_deq_ready           (io_out_ready),
    .io_enq_ready           (_q_io_enq_ready),
    .io_deq_valid           (io_out_valid),
    .io_deq_bits_head       (io_out_bits_head),
    .io_deq_bits_tail       (io_out_bits_tail),
    .io_deq_bits_payload    (io_out_bits_payload),
    .io_count               (_q_io_count)
  );
  assign io_credit_available_0 = _q_io_count == 2'h0;	// @[EgressUnit.scala:22:17, :32:27, :40:40]
  assign io_channel_status_0_occupied = ~channel_empty;	// @[EgressUnit.scala:20:30, :41:36]
endmodule

