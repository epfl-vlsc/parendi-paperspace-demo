// Generated by CIRCT firtool-1.30.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module TLROM(
  input         auto_in_a_valid,
  input  [1:0]  auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [16:0] auto_in_a_bits_address,
  input         auto_in_d_ready,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [1:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output [63:0] auto_in_d_bits_data
);

  wire [511:0][63:0] _GEN =
    '{64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h73656D616E2D74,
      64'h757074756F2D6B63,
      64'h6F6C6300736C6C65,
      64'h632D6B636F6C6323,
      64'h746E756F632D72,
      64'h68736D2C65766966,
      64'h6973006465696669,
      64'h6E752D6568636163,
      64'h6C6576656C2D65,
      64'h686361630073656D,
      64'h616E2D6765720073,
      64'h65676E617200656C,
      64'h646E616870007265,
      64'h6C6C6F72746E6F63,
      64'h2D74707572726574,
      64'h6E6900736C6C6563,
      64'h2D74707572726574,
      64'h6E69230073757461,
      64'h747300736E6F6967,
      64'h6572706D702C7663,
      64'h7369720079746972,
      64'h616C756E61726770,
      64'h6D702C7663736972,
      64'h6173692C766373,
      64'h6972006765720065,
      64'h686361632D6C6576,
      64'h656C2D7478656E00,
      64'h657A69732D656863,
      64'h61632D6900737465,
      64'h732D65686361632D,
      64'h6900657A69732D6B,
      64'h636F6C622D656863,
      64'h61632D6900746E75,
      64'h6F632D746E696F70,
      64'h6B616572622D6365,
      64'h78652D6572617764,
      64'h7261680065707974,
      64'h5F65636976656400,
      64'h657A69732D656863,
      64'h61632D6400737465,
      64'h732D65686361632D,
      64'h6400657A69732D6B,
      64'h636F6C622D656863,
      64'h61632D640079636E,
      64'h6575716572662D6B,
      64'h636F6C630079636E,
      64'h6575716572662D65,
      64'h736162656D697400,
      64'h6C65646F6D00656C,
      64'h62697461706D6F63,
      64'h736C6C65632D65,
      64'h7A69732300736C6C,
      64'h65632D7373657264,
      64'h6461230900000002,
      64'h200000002,
      64'h6B636F6C,
      64'h632D64657869661B,
      64'hC00000003,
      64'h6B,
      64'h636F6C635F737562,
      64'h705F6D6574737973,
      64'h6275739801000015,
      64'h300000000,
      64'hCA9A3B3F00000004,
      64'h300000000,
      64'h8B01000004,
      64'h300000000,
      64'h6B636F6C63,
      64'h5F737562705F6D65,
      64'h7473797362757301,
      64'h200000000,
      64'h6B636F6C632D6465,
      64'h7869661B0000000C,
      64'h300000000,
      64'h6B636F6C63,
      64'h5F7375626D5F6D65,
      64'h7473797362757398,
      64'h100001500000003,
      64'hCA9A3B3F,
      64'h400000003,
      64'h8B,
      64'h100000400000003,
      64'h6B,
      64'h636F6C635F737562,
      64'h6D5F6D6574737973,
      64'h6275730100000002,
      64'h6D656D55,
      64'h100000400000003,
      64'h10000,
      64'h100E500000008,
      64'h300000000,
      64'h306D6F722C657669,
      64'h6669731B0000000C,
      64'h300000000,
      64'h303030303140,
      64'h6D6F720100000002,
      64'h2000,
      64'h60000000604E,
      64'h100000C00000003,
      64'h737562,
      64'h2D656C706D69731B,
      64'hB00000003,
      64'h10000000F,
      64'h400000003,
      64'h100000000,
      64'h400000003,
      64'h30,
      64'h3030303030303640,
      64'h6C742D74726F702D,
      64'h6D6F747375632D6F,
      64'h696D6D0100000002,
      64'h10000000,
      64'h300000E500000008,
      64'h300000000,
      64'h30726F727265,
      64'h2C6576696669731B,
      64'hE00000003,
      64'h3030,
      64'h3033406563697665,
      64'h642D726F72726501,
      64'h200000001,
      64'h4601000004,
      64'h300000007,
      64'h7901000004,
      64'h300000000,
      64'h6C6F72746E6F6355,
      64'h100000800000003,
      64'h10000000,
      64'h102E500000008,
      64'h300000002,
      64'hD400000004,
      64'h300000000,
      64'h6568636163,
      64'h30656863616365,
      64'h766973756C636E69,
      64'h2C6576696669731B,
      64'h1D00000003,
      64'h6B01000000,
      64'h300000000,
      64'h1007100000004,
      64'h300000080,
      64'h6400000004,
      64'h300000002,
      64'h5F01000004,
      64'h300000040,
      64'h5100000004,
      64'h300000000,
      64'h3030303031,
      64'h30324072656C6C6F,
      64'h72746E6F632D6568,
      64'h6361630100000002,
      64'h6C6F7274,
      64'h6E6F635501000008,
      64'h300000000,
      64'h10000000400000E5,
      64'h800000003,
      64'h3030,
      64'h3034406765722D73,
      64'h7365726464612D74,
      64'h6F6F62010000004E,
      64'h100000000000003,
      64'h7375,
      64'h622D656C706D6973,
      64'h636F732D647261,
      64'h79706968632C6373,
      64'h6C762D6C6670651B,
      64'h2200000003,
      64'h10000000F,
      64'h400000003,
      64'h100000000,
      64'h400000003,
      64'h636F7301,
      64'h200000002,
      64'h4601000004,
      64'h300000000,
      64'h20000000080E5,
      64'h800000003,
      64'h79726F,
      64'h6D656D7C00000007,
      64'h300000000,
      64'h3030303030303038,
      64'h4079726F6D656D01,
      64'h200000002,
      64'h200000031,
      64'h100000000000003,
      64'h63746E,
      64'h692D7570632C7663,
      64'h7369721B0000000F,
      64'h300000001,
      64'h2001000004,
      64'h300000000,
      64'h72656C6C6F,
      64'h72746E6F632D7470,
      64'h75727265746E6901,
      64'h40420F002C,
      64'h400000003,
      64'h79,
      64'h616B6F1901000005,
      64'h300000008,
      64'h801000004,
      64'h300000004,
      64'hF300000004,
      64'h300000000,
      64'h74656B636F,
      64'h72785F6D7068697A,
      64'h5F6965636E656669,
      64'h7A5F727363697A63,
      64'h616D6934367672E9,
      64'h2500000003,
      64'hE5,
      64'h400000003,
      64'h1000000D4,
      64'h400000003,
      64'h100000C7,
      64'h400000003,
      64'h40000000BA,
      64'h400000003,
      64'h40000000A7,
      64'h400000003,
      64'h100000088,
      64'h400000003,
      64'h7570637C,
      64'h400000003,
      64'h1000006F,
      64'h400000003,
      64'h4000000062,
      64'h400000003,
      64'h400000004F,
      64'h400000003,
      64'h76,
      64'h6373697200307465,
      64'h6B636F722C657669,
      64'h6669731B00000015,
      64'h300000000,
      64'h3F00000004,
      64'h300000000,
      64'h304075706301,
      64'h40420F002C,
      64'h400000003,
      64'hF,
      64'h400000003,
      64'h100000000,
      64'h400000003,
      64'h73,
      64'h7570630100000000,
      64'h64726179706968,
      64'h632C63736C762D6C,
      64'h6670652600000013,
      64'h300000000,
      64'h7665642D647261,
      64'h79706968632C6373,
      64'h6C762D6C6670651B,
      64'h1700000003,
      64'h10000000F,
      64'h400000003,
      64'h100000000,
      64'h400000003,
      64'h1,
      64'h0,
      64'h0,
      64'h68060000AB,
      64'h100000000000010,
      64'h1100000028,
      64'hA006000038,
      64'h4B080000ED,
      64'hFE0DD06572656820,
      64'h73656F6720425444,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'hFFDFF06F10500073,
      64'hFADFF06F30405073,
      64'h385859300000597,
      64'hF14025737C105073,
      64'h0,
      64'h0,
      64'h0,
      64'h0,
      64'h40067,
      64'h705859300000597,
      64'hF140257301F41413,
      64'h10041B7C105073};	// BootROM.scala:53:47
  assign auto_in_a_ready = auto_in_d_ready;
  assign auto_in_d_valid = auto_in_a_valid;
  assign auto_in_d_bits_size = auto_in_a_bits_size;
  assign auto_in_d_bits_source = auto_in_a_bits_source;
  assign auto_in_d_bits_data =
    (|(auto_in_a_bits_address[15:12])) ? 64'h0 : _GEN[auto_in_a_bits_address[11:3]];	// BootROM.scala:46:22, :51:34, :52:64, :53:{47,53}
endmodule

