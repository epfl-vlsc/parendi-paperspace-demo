// Generated by CIRCT firtool-1.30.0
module SimMMIOToHostSnooper #(parameter SIZE = 8192,
                     parameter BITS = 8,
                     parameter LANES = 8,
                     parameter OFFSET = 'h0,
                     parameter ADDR_BITS = $clog2(SIZE)
)
(
   input  wire [ADDR_BITS - 1 : 0] addr,
   input  wire [BITS * LANES - 1 : 0] wdata,
   input  wire [LANES - 1 : 0] wstrb,
   input  wire wen,
   input  wire ren,
   input  wire clock,
   input  wire reset,
   output wire [BITS * LANES - 1 : 0] rdata
);


   logic [ADDR_BITS - 1 : 0] addr_q;
   logic wen_q;
   logic [LANES - 1 : 0] wstrb_q;
   logic [BITS * LANES - 1 : 0] wdata_q;
   logic [63 : 0] cycle_counter = 0;
   assign rdata = 0;
   always_ff @(posedge clock) cycle_counter <= cycle_counter + 1;
   always_ff @(posedge clock) begin
     if (reset) begin
         wen_q <= 0;
         wstrb_q <= 0;
     end else if (wen) begin
         addr_q <= addr;
         wen_q <= wen;
         wstrb_q <= wstrb;
         wdata_q <= wdata;
       end
   end
`ifndef SYNTHESIS
   always_ff @(posedge clock) begin
          if (wen_q && wstrb_q[3:0] == 4'b1111 && addr_q == OFFSET) begin
            if (wdata_q[31:0] != 1) begin
              $display("@%d: Test failed with toHost %d", cycle_counter, wdata_q);
              $stop;
            end else begin
              $display("@%d: Test passed", cycle_counter);
              $finish;
            end
          end else if (wen_q && wstrb_q != 0) begin
              $display("@%d: Unexpected MMIO write\n\taddr: 0x%h wdata: 0x%h wstrb: %b", cycle_counter, addr_q, wdata_q, wstrb_q);
              // $stop;
          end
   end
`endif
endmodule
